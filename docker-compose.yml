version: '3.4'

# envs https://medium.com/softonic-eng/docker-compose-from-development-to-production-88000124a57c

services:

#  neo4j:
#    image: neo4j
#    ports:
#      - "7474:7474"
#      - "7687:7687"
#    volumes:
#      - ./conf:/conf
#      - ./data:/data
#      - ./import:/import
#      - ./logs:/logs
#      - ./plugins:/plugins
#    environment:
      # Raise memory limits
#      - NEO4J_dbms_memory_pagecache_size=1G
#      - NEO4J_dbms.memory.heap.initial_size=1G
#      - NEO4J_dbms_memory_heap_max__size=1G

  # https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#_setting_jvm_heap_size
#  elastic:
#    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.2
#    container_name: es
#    environment:
#      #- ES_JAVA_OPTS="-Xms1g -Xmx1g"
#      - discovery.type=single-node
##      - node.name=es-node
##      - cluster.name=es-cluster
##      - discovery.type=single-node
#    ports:
#      - "9200:9200"

  smtp:
    image: jijiechen/papercut:latest
    ports:
      - "25:25"
      - "37408:37408"

  nitter:
    container_name: nitter
    image: zedeus/nitter:latest
    volumes:
      - ./docker/nitter.conf:/src/nitter.conf:ro
    depends_on:
      - nitter-redis
    restart: unless-stopped
    healthcheck:
      test: wget -nv --tries=1 --spider http://127.0.0.1:8080/Jack/status/20 || exit 1
      interval: 30s
      timeout: 5s
      retries: 2

  nitter-redis:
    image: redis:6-alpine
    container_name: nitter-redis
    command: redis-server --save 60 1 --loglevel warning
#    volumes:
#      - nitter-redis:/data
    restart: unless-stopped
    healthcheck:
      test: redis-cli ping
      interval: 30s
      timeout: 5s
      retries: 2

  # https://hub.docker.com/_/postgres/
  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    expose:
      - 5432
    ports:
    - "5432:5432"
    networks:
      - postgres

  feedless-agent:
    image: damoeb/feedless:agent-0.1
#    deploy:
#      replicas: 2
    security_opt:
      - seccomp=./chrome.json
    restart: unless-stopped
    environment:
      - APP_EMAIL=${APP_ROOT_EMAIL}
      - APP_SECRET_KEY=${APP_ROOT_SECRET_KEY}
      - APP_HOST=feedless-core:8080
      - APP_SECURE=false
    ports:
      - "3000:3000"
#    healthcheck:
#      test: curl -f https://localhost:3000 || exit 1
    networks:
      - monitoring

  feedless-app:
    image: damoeb/feedless:app-0.1
    restart: unless-stopped
    volumes:
      - ./docker/app/app-config.json:/usr/share/nginx/html/config.json
    ports:
      - "4200:80"

  feedless-core:
    image: damoeb/feedless:core-0.1
    restart: unless-stopped
#    healthcheck:
#      test: curl -f https://localhost:8080 || exit 1
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - APP_DATABASE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      - APP_ACTIVE_PROFILES=database,cache,metrics
      - APP_WHITELISTED_HOSTS=feedless-core
      - AUTH_TOKEN_ANONYMOUS_VALIDFORDAYS=3
    networks:
      - postgres
      - monitoring

# ----------------------------------------------------------------------------------------------------------------------
# -- MONITORING
# ----------------------------------------------------------------------------------------------------------------------

  loki:
    image: grafana/loki:2.5.0
    volumes:
      - ./docker/loki:/etc/loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki.yml
    networks:
      - monitoring

  promtail:
    image: grafana/promtail:2.5.0
    volumes:
      - /var/log:/var/log
      - ./docker/promtail:/etc/promtail
    ports:
      - "3200:3100"
    command: -config.file=/etc/promtail/promtail.yml
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus
    environment:
      - APP_ACTUATOR_PASSWORD=${APP_ACTUATOR_PASSWORD}
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks:
      - monitoring

networks:
  postgres:
    driver: bridge
  monitoring:
    driver: bridge
