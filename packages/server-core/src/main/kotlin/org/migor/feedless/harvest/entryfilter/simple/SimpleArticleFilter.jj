options {
    STATIC = false;
    IGNORE_CASE = true;
}

PARSER_BEGIN(SimpleArticleFilter)

package org.migor.feedless.harvest.entryfilter.simple.generated;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.migor.feedless.harvest.entryfilter.simple.SimpleArticle;import org.springframework.expression.spel.ast.StringLiteral;

public class SimpleArticleFilter {

  private final Logger log = LoggerFactory.getLogger(SimpleArticleFilter.class);

  private boolean containsAnywhere(String searchToken, SimpleArticle article) {
      boolean matches = article.getTitle().toLowerCase().contains(searchToken.toLowerCase()) || article.getBody().toLowerCase().contains(searchToken.toLowerCase());
      log.debug("containsAnywhere "+searchToken+" -> " + matches);
      return matches;
  }

  private String resolveField(String field, SimpleArticle article) {
    switch(field){
        case "#title":
          return article.getTitle();
        case "#url":
          return article.getUrl();
        case "#body":
          return article.getBody();
        case "#any":
          return article.getBody() + " " + article.getTitle() + " " + article.getUrl();
    }
    throw new RuntimeException("Cannot resolve field "+field);
  }

  public Boolean matches(SimpleArticle article) throws ParseException {
    return BooleanExpression(article);
  }
}

PARSER_END(SimpleArticleFilter)
SKIP: { " " | "\t" | "\n" }
TOKEN: {
    <PLUS             : "+" >
  | <TRUE             : "true" >
  | <FALSE            : "false" >
  | <MINUS            : "-" >
  | <NUMBER           : (["0"-"9"])+>
  | <STRING           : "\"" (~["\""])* "\"">
  | <ENDS_WITH        : "endsWith" >
  | <STARTS_WITH      : "startsWith" >
  | <LEN              : "len" >
  | <CONTAINS         : "contains" >
  | <FIELD            : "#title" | "#url" | "#body" | "#any" >
  | <NOT              : "not" >
  | <OR               : "or" >
  | <AND              : "and" >
  | <GT               : "gt" >
  | <GTE              : "gte" >
  | <LT               : "lt" >
  | <LTE              : "lte" >
  | <EQ               : "eq" >
}

private boolean BooleanExpression(SimpleArticle article) :
{
  Token t;
  Boolean result, boolA, boolB;
  int numA, numB;
  String strA, strB;
}
{
  "or" "(" boolA = BooleanExpression(article) "," boolB = BooleanExpression(article) ")" { return boolA || boolB; }
  | "and" "(" boolA = BooleanExpression(article) "," boolB = BooleanExpression(article) ")" { return boolA && boolB; }
  | "contains" "(" strA = StringExpression(article) "," strB = StringExpression(article) ")" { return strA.contains(strB); }
  | "gt" "(" numA = NumberExpression(article) "," numB = NumberExpression(article) ")" { return numA > numB; }
  | "gte" "(" numA = NumberExpression(article) "," numB = NumberExpression(article) ")" { return numA >= numB; }
  | "lt" "(" numA = NumberExpression(article) "," numB = NumberExpression(article) ")" { return numA < numB; }
  | "lte" "(" numA = NumberExpression(article) "," numB = NumberExpression(article) ")" { return numA <= numB; }
  | "eq" "(" numA = NumberExpression(article) "," numB = NumberExpression(article) ")" { return numA == numB; }
  | "endsWith" "(" strA = StringExpression(article) "," strB = StringExpression(article) ")" { return strA.endsWith(strB); }
  | "startsWith" "(" strA = StringExpression(article) "," strB = StringExpression(article) ")" { return strA.startsWith(strB); }
  | <NOT> "(" result = BooleanExpression(article) ")" { return !result; }
  | strA = StringExpression(article) { return containsAnywhere(strA, article); }
  | <EOF> { return true; }
}

private String StringExpression(SimpleArticle article):
{
  Token t;
  String literal;
}
{
  literal = StringLiteral() { return literal; }
  | literal = Identifier(article) { return literal; }
}

private String StringLiteral():
{
  Token t;
  String literal;
}
{
  t = <STRING> { return t.image.substring(1, t.image.length() - 1); }
}

private int NumberExpression(SimpleArticle article):
{
  Token t;
  String literal;
}
{
  t = <NUMBER> { return Integer.parseInt(t.image); }
  | "len" "(" literal = StringExpression(article) ")" { return literal.length(); }
}

private String Identifier(SimpleArticle article) :
{  Token t; }
{
    t = <FIELD>
    {
      String result = resolveField(t.image, article);
      log.debug("resolveField "+t.image+" "+result);
      return result;
    }
}
